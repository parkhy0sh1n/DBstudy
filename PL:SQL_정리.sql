/*
    PL/SQL(절차형 SQL)
    1) 응용 프로그램에서의 데이터베이스 처리 성능을 향상시키기 위해
       SQL 문장에서 변수정의, 조건처리(IF), 반복처리(LOOP, WHILE, FOR) 등을 지원하며,
       오라클에서 지원하는 Procedure Language이다.
    2) 다양한 저장 모듈을 개발할 수 있다.
       * 저장 모듈이란 PL/SQL 문장을 데이터베이스 서버에 저장하여
         사용자와 애플리케이션 사이에서 공유할 수 있도록 만든 일종의 SQL 컴포넌트 프로그램이며,
         독립적으로 실행되거나 다른 프로그램으로부터 실행될 수 있는 완전한 실행 프로그램이다.
       * 컴포넌트(component)란 여러 개의 프로그램 함수들을 모아 하나의 특정한 기능을 수행할 수 있도록 구성한 작은 기능적 단위를 말한다.
       오라클의 저장 모듈에는 프로시저, 사용자 함수, 트리거가 있다.
    3) 블럭 구조로 되어있어 다수의 SQL문을 한 번에 오라클 데이터베이스로 보내서 처리하므로 수행 속도를 향상시킬 수 있다.
       여러 SQL문장을 블럭으로 묶고 한 번에 서버로 보내기 떄문에 통신량을 줄일 수 있다.
       또한 각 기능별로 모듈화가 가능하다는 장점이 있다.
*/





-- 프로시저 문법
CREATE [OR REPLACE] PROCEDURE 프로시저명[(매개변수명 IN or OUT 데이터타입(%TYPE : 테이블 컬럼과 PL/SQL 변수 간의 유형 호환성이 유지된다.)]
-- OR REPLACE 구문을 사용하지 않으면 참조 관계가 단절된다.(기존 모듈을 무시하고 새로운 내용으로 덮어쓰겠다는 의미이다.)
-- 매개변수 선언은 생략이 가능하다.
-- IN은 프로시저 실행에 필요한 값을 직접 입력 받는 형식, OUT은 프로시저 실행 후 호출한 프로그램으로 값을 반환 받을 수 있은 형식(IN은 디폴트 값이다.)
IS[AS]
-- 블럭을 시작한다는 의미와 동시에 실행부에서 사용할 변수나 상수를 선언하는 선언부.
-- 프로시저와 사용자 함수에서는 IS[AS] 구문을 사용하며, 트리거에서는 DECLARE 구문을 사용한다.(의미는 같다.)
-- IS[AS]는 필수이고, DECLARE는 생략 가능하다.
BEGIN
-- 실행문을 작성한다.
[EXCEPTION]
-- 블럭 안에서 실행되는 SQL문 실행 도중 발샏한 에러를 처리하는 예외 처리부이다.
END;
-- 실행문의 종료를 의미한다.



-- 사용자 함수 문법
CREATE [OR REPLACE] FUNCTION 함수명[(매개변수명 데이터타입(%TYPE : 테이블 컬럼과 PL/SQL 변수 간의 유형 호환성이 유지된다.)]
-- OR REPLACE 구문을 사용하지 않으면 참조 관계가 단절된다.(기존 모듈을 무시하고 새로운 내용으로 덮어쓰겠다는 의미이다.)
-- 매개변수 선언은 생략이 가능하다.
RETURN 데이터타입;
-- 함수가 반환할 데이터 타입을 지정한다.
IS
-- 블럭을 시작한다는 의미와 동시에 실행부에서 사용할 변수나 상수를 선언하는 선언부.
-- 프로시저와 사용자 함수에서는 IS[AS] 구문을 사용하며, 트리거에서는 DECLARE 구문을 사용한다.(의미는 같다.)
-- IS[AS]는 필수이고, DECLARE는 생략 가능하다.
BEGIN
-- 실행문을 작성한다.
[EXCEPTION]
-- 블럭 안에서 실행되는 SQL문 실행 도중 발샏한 에러를 처리하는 예외 처리부이다.
END;
-- 실행문의 종료를 의미한다.



-- 트리거 문법
[SET SERVEROUTPUT ON;]
-- 기본적으로 PL/SQL은 결과물을 보여주지 않는다.
-- 결과물을 보고 싶다면 SERVEROUTPUT 설정 을 ON 으로 설정해 주어야 한다.
-- 메세지를 출력하는 트리거에서 사용한다.
CREATE [OR REPLACE] TRIGGER 트리거명
-- OR REPLACE 구문을 사용하지 않으면 참조 관계가 단절된다.(기존 모듈을 무시하고 새로운 내용으로 덮어쓰겠다는 의미이다.)
[DECLARE]
-- 블럭을 시작한다는 의미와 동시에 실행부에서 사용할 변수나 상수를 선언하는 선언부.
-- 프로시저와 사용자 함수에서는 IS[AS] 구문을 사용하며, 트리거에서는 DECLARE 구문을 사용한다.(의미는 같다.)
-- IS[AS]는 필수이고, DECLARE는 생략 가능하다.
[AFTER or BEFORE]
-- AFTER : 이벤트가 발생한 후 트리거 실행
-- BEFORE : 이벤트가 발생하기 전에 트리거 실행
INSERT or UPDATE or DELETE ON 테이블명 [REFERENCING NEW AS NEW OLD AS OLD]
-- 트리거 이벤트이며, 하나 이상 올 수 있다.
-- REFERENCING NEW AS NEW OLD AS OLD는 이전 값과 새로운 값을 참조할 때 사용한다.
[FOR EACH ROW]
-- 행 트리거 여부를 결정한다.
-- FOR EACH ROW가 생략되면 문장 트리거가 실행된다.
BEGIN
-- 실행문을 작성한다.
END;
-- 실행문의 종료를 의미한다.
  
  
  
  
  
/*
    프로시저와 사용자 함수의 차이
    
    1. 의미
        - 프로시저
        일련의 쿼리를 마치 하나의 함수처럼 실행하기 위한 쿼리의 집합이며, 일련의 작업을 정리한 절차이다.
        보통 단독으로 실행해야 할 작업을 위임받았을 때 사용한다.
        - 사용자 함수
        하나의 특별한 목적의 작업을 수행하기 위해 독립적으로 설계된 코드의 집합이다.
        즉, 함수가 여러 작업을 위한 기능이라면 프로시저는 작업을 정리한 절차이다.
        보통 로직을 도와주는 역할이며, 간단한 계산, 수치 등을 나타낼 때 사용한다.
    
    2. 매개변수
        - 프로시저
        매개변수를 입력,출력,입출력 형식으로 받을 수 있다.
        - 사용자 함수
        매개변수를 입력 형식으로만 받을 수 있다.
    
    3. 반환값
        - 프로시저     
        반환값을 가질 수도 있고 가지지 않을 수도 있다.
        - 사용자 함수
        반환값을 반드시 가져야 한다.
    
    4. 쿼리문 내에서 실행가능
        - 프로시저
        SELECT, WHERE 문 등에서 사용 불가능하다.
        - 사용자 함수
        SELECT,WHERE 문 등에서 사용이 가능하다.
    
    5. 처리 장소
        - 프로시저
        클라이언트(화면)에서 값을 건네받아 서버에서 작업을 한 뒤 클라이언트에게 전달한다.
        즉, 서버에서 실행이 되어 속도면에서 빠른 성능을 보여준다.
        - 함수
        클라이언트(화면)에서 값을 건네 받고 서버에서 필요한 값을 가져와서 클라이언트에서 작업을 하고 반환한다.
        즉, 클라이언트(화면)에서 실행이 되어 프로시저보단 속도가 느리다.
*/